import streamlit as st
import os
import requests
from textblob import TextBlob
from collections import Counter

# Configure Streamlit
st.set_page_config(page_title="Stock Sentiment Tracker",
                   layout="wide",
                   initial_sidebar_state="expanded")

# API Keys
NEWS_API_KEY = os.getenv("NEWS_API_KEY", "XYZ")
ALPHA_VANTAGE_KEY = os.getenv("ALPHA_VANTAGE_KEY", "ABC")


# Fetch Stock News
def fetch_news_headlines(ticker):
    url = f"https://newsapi.org/v2/everything?q={ticker}&apiKey={NEWS_API_KEY}"
    response = requests.get(url)
    data = response.json()
    return [article["title"] for article in data.get("articles", [])[:5]]


# Sentiment Analysis
def analyze_sentiment(headlines):
    sentiments = [
        TextBlob(headline).sentiment.polarity for headline in headlines
    ]
    avg_sentiment = sum(sentiments) / len(sentiments) if sentiments else 0
    if avg_sentiment > 0: return "Positive"
    elif avg_sentiment < 0: return "Negative"
    return "Neutral"


# Fetch Stock Price Change
def fetch_stock_price_change(ticker):
    url = f"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={ticker}&apikey={ALPHA_VANTAGE_KEY}"
    response = requests.get(url).json()
    time_series = response.get("Time Series (Daily)", {})
    dates = sorted(time_series.keys(), reverse=True)

    if len(dates) < 2:
        return "Price data unavailable"

    latest_close = float(time_series[dates[0]]["4. close"])
    previous_close = float(time_series[dates[1]]["4. close"])
    return f"{((latest_close - previous_close) / previous_close) * 100:.2f}%"


# Streamlit UI
st.title("📈 Stock Sentiment & Price Tracker")
st.write("Enter a stock ticker to analyze sentiment and price trends.")

ticker = st.text_input("Stock Ticker (e.g., AAPL, TSLA):", "").upper()

if st.button("Analyze"):
    if ticker:
        with st.spinner("Fetching data..."):
            headlines = fetch_news_headlines(ticker)
            sentiment = analyze_sentiment(headlines)
            price_change = fetch_stock_price_change(ticker)

        # Display Results
        st.subheader(f"Sentiment Analysis for {ticker}")
        for i, headline in enumerate(headlines):
            st.write(f"{i+1}. {headline}")

        st.write(f"**Overall Sentiment:** {sentiment}")
        st.write(f"**Stock Price Change (Last 2 Days):** {price_change}")

        # Recommendation
        if sentiment == "Positive":
            st.success("✅ Recommendation: Buy or Hold")
        elif sentiment == "Negative":
            st.warning("⚠️ Recommendation: Consider Selling")
        else:
            st.info("🔍 Recommendation: Monitor Trends")
    else:
        st.error("Please enter a valid stock ticker.")
